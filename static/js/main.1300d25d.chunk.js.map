{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContanctLIst.jsx","components/Filter/Filter.jsx","App.jsx","index.js"],"names":["ContactForm","state","name","number","nameInputId","uuidv4","numberInputId","handleOnChange","e","setState","target","value","handleOnSubmit","preventDefault","props","contacts","find","contact","alert","newContact","id","addContact","autoComplete","onSubmit","this","htmlFor","type","pattern","title","required","onChange","Component","ContactLIst","filteredContacts","filterValue","deleteContact","renderContacts","length","map","onClick","Filter","findContacts","inputId","App","filter","prevState","newContacts","push","index","forEach","idx","dataset","newContactsList","splice","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1300d25d.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    addContact: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        number: PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ),\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleOnSubmit = e => {\n    e.preventDefault();\n    //find\n    const isContactExisting = this.props.contacts.find(\n      contact => contact.name === this.state.name,\n    );\n    if (isContactExisting) {\n      alert(`${this.state.name} is already in contacts.`);\n      return;\n    }\n    const newContact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.addContact(newContact);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form autoComplete={'off'} onSubmit={this.handleOnSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            id={this.numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <button type={'submit'}>Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport { ContactForm };\n","import PropTypes from 'prop-types';\n\nfunction ContactLIst({\n  contacts,\n  filteredContacts,\n  filterValue,\n  deleteContact,\n}) {\n  const renderContacts =\n    filteredContacts.length > 0 ? filteredContacts : contacts;\n\n  if (\n    (!filterValue && contacts.length > 0) ||\n    (filterValue && filteredContacts.length > 0)\n  ) {\n    return (\n      <ul>\n        {renderContacts.map(contact => {\n          return (\n            <li key={contact.name}>\n              {contact.name}: {contact.number}\n              <button\n                type={'button'}\n                data-name={contact.name}\n                onClick={deleteContact}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  } else if (filterValue) {\n    return <p>There are no contacts with this name.</p>;\n  } else {\n    return <p>There are no contacts here.</p>;\n  }\n}\n\nexport { ContactLIst };\n\nContactLIst.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  filteredContacts: PropTypes.array,\n  filterValue: PropTypes.string,\n  deleteContact: PropTypes.func,\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nfunction Filter({ filterValue, findContacts }) {\n  const inputId = uuidv4();\n  return (\n    <label htmlFor=\"inputId\">\n      Find contacts by name\n      <input\n        id={inputId}\n        type=\"text\"\n        value={filterValue}\n        onChange={findContacts}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n  findContacts: PropTypes.func,\n};\n\nexport { Filter };\n","import { Component } from 'react';\nimport { ContactForm } from './components/ContactForm/ContactForm';\nimport { ContactLIst } from './components/ContactList/ContanctLIst';\nimport { Filter } from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { name: 'John Walsh', id: '5', number: '555-55-54' },\n      { name: 'Sofie Terner', id: '6', number: '555-55-55' },\n    ],\n    filter: '',\n  };\n\n  addContact = newContact => {\n    this.setState(prevState => {\n      const newContacts = [...prevState.contacts];\n      newContacts.push(newContact);\n      return {\n        contacts: newContacts,\n      };\n    });\n  };\n\n  deleteContact = e => {\n    let index = null;\n    this.state.contacts.forEach((contact, idx) => {\n      if (contact.name === e.target.dataset.name) {\n        index = idx;\n      }\n    });\n    this.setState(prevState => {\n      const newContactsList = [...this.state.contacts];\n      newContactsList.splice(index, 1);\n      return { contacts: newContactsList };\n    });\n  };\n\n  filteredContacts = [];\n\n  findContacts = e => {\n    const value = e.target.value;\n    this.setState({ filter: value });\n    this.filteredContacts = this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(value.toLowerCase()),\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm\n          addContact={this.addContact}\n          contacts={this.state.contacts}\n        />\n        <h2>Contacts</h2>\n        <Filter\n          filterValue={this.state.filter}\n          findContacts={this.findContacts}\n        />\n        <ContactLIst\n          contacts={this.state.contacts}\n          filteredContacts={this.filteredContacts}\n          filterValue={this.state.filter}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}