{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContanctLIst.jsx","components/Filter/Filter.jsx","App.jsx","index.js"],"names":["ContactForm","state","name","number","nameInputId","uuidv4","numberInputId","handleOnChange","e","setState","target","value","handleOnSubmit","preventDefault","newContact","id","props","addContact","autoComplete","onSubmit","this","htmlFor","type","pattern","title","required","onChange","Component","ContactLIst","contacts","filteredContacts","filterValue","renderContacts","length","map","contact","Filter","inputValue","findContacts","inputId","App","filter","prevState","newContacts","push","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAIMA,E,4MAKJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,YAAcC,c,EACdC,cAAgBD,c,EAEhBE,eAAiB,SAAAC,GACf,EAAKC,SAAL,eACGD,EAAEE,OAAOR,KAAOM,EAAEE,OAAOC,S,EAI9BC,eAAiB,SAAAJ,GACfA,EAAEK,iBACF,IAAMC,EAAa,CACjBC,GAAIV,cACJH,KAAM,EAAKD,MAAMC,KACjBC,OAAQ,EAAKF,MAAME,QAErB,EAAKa,MAAMC,WAAWH,GACtB,EAAKL,SAAS,CACZP,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,OACE,uBAAMe,aAAc,MAAOC,SAAUC,KAAKR,eAA1C,UACE,wBAAOS,QAASD,KAAKhB,YAArB,iBAEE,uBACEW,GAAIK,KAAKhB,YACTkB,KAAK,OACLpB,KAAK,OACLqB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRd,MAAOS,KAAKnB,MAAMC,KAClBwB,SAAUN,KAAKb,oBAGnB,wBAAOc,QAASD,KAAKd,cAArB,mBAEE,uBACES,GAAIK,KAAKd,cACTgB,KAAK,MACLpB,KAAK,SACLqB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRd,MAAOS,KAAKnB,MAAME,OAClBuB,SAAUN,KAAKb,oBAGnB,wBAAQe,KAAM,SAAd,gC,GA9DkBK,aCF1B,SAASC,EAAT,GAAmE,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,iBAAkBC,EAAe,EAAfA,YAC3CC,EACJF,EAAiBG,OAAS,EAAIH,EAAmBD,EAEnD,OAAKE,GAAgBA,GAAeD,EAAiBG,OAAS,EAE1D,6BACGD,EAAeE,KAAI,SAAAC,GAClB,OACE,+BACGA,EAAQjC,KADX,KACmBiC,EAAQhC,SADlBgC,EAAQjC,WAQlB,0CChBX,SAASkC,EAAT,GAA+C,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aACtBC,EAAUlC,cAChB,OACE,wBAAOgB,QAAQ,UAAf,kCAEE,uBACEN,GAAIwB,EACJjB,KAAK,OACLX,MAAO0B,EACPX,SAAUY,O,ICPZE,E,4MACJvC,MAAQ,CACN4B,SAAU,CACR,CAAE3B,KAAM,aAAca,GAAI,EAAGZ,OAAQ,aACrC,CAAED,KAAM,eAAgBa,GAAI,EAAGZ,OAAQ,cAEzCsC,OAAQ,I,EAGVxB,WAAa,SAAAH,GACX,EAAKL,UAAS,SAAAiC,GACZ,IAAMC,EAAW,YAAOD,EAAUb,UAElC,OADAc,EAAYC,KAAK9B,GACV,CACLe,SAAUc,O,EAKhBb,iBAAmB,G,EAEnBQ,aAAe,SAAA9B,GACb,IAAMG,EAAQH,EAAEE,OAAOC,MACvB,EAAKF,SAAS,CAAEgC,OAAQ9B,IACxB,EAAKmB,iBAAmB,EAAK7B,MAAM4B,SAASY,QAAO,SAAAN,GAAO,OACxDA,EAAQjC,KAAK2C,cAAcC,SAASnC,EAAMkC,mB,4CAI9C,WACE,OACE,gCACE,2CACA,cAAC,EAAD,CACE5B,WAAYG,KAAKH,WACjBY,SAAUT,KAAKnB,MAAM4B,WAEvB,0CACA,cAACO,EAAD,CACEC,WAAYjB,KAAKnB,MAAMwC,OACvBH,aAAclB,KAAKkB,eAErB,cAACV,EAAD,CACEC,SAAUT,KAAKnB,MAAM4B,SACrBC,iBAAkBV,KAAKU,0B,GA5CfH,aCAlBoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.761b0b16.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    addContact: PropTypes.func,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleOnSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.addContact(newContact);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form autoComplete={'off'} onSubmit={this.handleOnSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            id={this.numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <button type={'submit'}>Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport { ContactForm };\n","import PropTypes from 'prop-types';\n\nfunction ContactLIst({ contacts, filteredContacts, filterValue }) {\n  const renderContacts =\n    filteredContacts.length > 0 ? filteredContacts : contacts;\n\n  if (!filterValue || (filterValue && filteredContacts.length > 0)) {\n    return (\n      <ul>\n        {renderContacts.map(contact => {\n          return (\n            <li key={contact.name}>\n              {contact.name}: {contact.number}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  } else {\n    return <p>Error!!!!</p>;\n  }\n}\n\nexport { ContactLIst };\n\nContactLIst.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nfunction Filter({ inputValue, findContacts }) {\n  const inputId = uuidv4();\n  return (\n    <label htmlFor=\"inputId\">\n      Find contacts by name\n      <input\n        id={inputId}\n        type=\"text\"\n        value={inputValue}\n        onChange={findContacts}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  inputValue: PropTypes.string,\n  findContacts: PropTypes.func,\n};\n\nexport { Filter };\n","import { Component } from 'react';\nimport { ContactForm } from './components/ContactForm/ContactForm';\nimport { ContactLIst } from './components/ContactList/ContanctLIst';\nimport { Filter } from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { name: 'John Walsh', id: 5, number: '555-55-54' },\n      { name: 'Sofie Terner', id: 6, number: '555-55-55' },\n    ],\n    filter: '',\n  };\n\n  addContact = newContact => {\n    this.setState(prevState => {\n      const newContacts = [...prevState.contacts];\n      newContacts.push(newContact);\n      return {\n        contacts: newContacts,\n      };\n    });\n  };\n\n  filteredContacts = [];\n\n  findContacts = e => {\n    const value = e.target.value;\n    this.setState({ filter: value });\n    this.filteredContacts = this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(value.toLowerCase()),\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm\n          addContact={this.addContact}\n          contacts={this.state.contacts}\n        />\n        <h2>Contacts</h2>\n        <Filter\n          inputValue={this.state.filter}\n          findContacts={this.findContacts}\n        />\n        <ContactLIst\n          contacts={this.state.contacts}\n          filteredContacts={this.filteredContacts}\n          // filterValue={this.state.filter}\n        />\n      </div>\n    );\n  }\n}\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}